缓存，每一级都可以看成是下一级的缓存
依据：程序的局部性原理(时间上的和空间上的)

缓存实验

PartA
该部分主要是写一个简单的缓存模拟器，主要要弄清以下几个方面：

1、如何从命令行获取参数, getopt(argc, argv, const char *), 对应的const char *指出识别哪些选项，并将其对应的参数放到optarg变量里
2、如何读取文件输入， fscanf(File *, format, ...)
3、通过malloc分配内存，记录块大小、行数、组数，最后通过free释放
4、参照给出的参考模拟器的输出，对照着设置变量，统计并输出hit, miss, 以及evction

PartB
(该部分参考了网上各路大神。。。)
该部分主要是通过比较miss数量，来优化矩阵转置

缓存块大小32字节，对应8个int整数， 同时有32组
对于32 x 32 的矩阵来说，每8行就会冲突，可以使用8 x 8 分块来处理，运行后不难发现，冲突有点严重，根源在于对角线元素，先加载A，然后写B的时候又把A给覆盖了，然后又得重新加载。。。
用一个8 x 8的矩阵，在草稿纸上简单画一下原因就出来了，所以需要特殊处理，一种方法是将A的8 x 8矩阵的每一行都读进寄存器变量，这样就不会由于对角线写覆盖重复读A了，虽然仍然会有小小的读覆盖
另一种方法是一次读A的8 x 8的每一行到寄存器，然后写进B的8 x 8的每一行，最后对这个B的8 x 8的块做一下转置（注意这个时候B的8 x 8的块都在缓存里）

对于64 x 64的矩阵，每4行就会冲突，可以将8 x 8的每一个分成4个4 x 4的矩阵来处理，比较麻烦(同样最好自己简单在草稿纸上画一画)

对于61 x 67的矩阵，似乎没啥好方法，直接分块，枚举块的大小找到符号要求的。。。
