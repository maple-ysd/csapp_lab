本实验主要是为了练习阅读汇编代码以及学习掌握GDB(GNU debugger)的使用。

一个有6个炸弹，外加一个在最后的隐藏炸弹。

objdump -d 可执行文件名/.o目标文件
将可执行文件/目标文件反汇编并输出到屏幕上， 当然也可以在命令行加  > 文件名text  进行重定向并输出到text

gdb 可执行文件X           // 启动gdb
quit/q                    // 退出gdb

disas func                // 反汇编函数func，若没有参数，反汇编当前函数

break 函数名func          // 在函数入口处设置断点(具体来说就是程序停在callq 0x.....<func>指令但还没执行callq， 下一步将压栈函数返回地址，进入函数
break N                   // N表示在gdb下，查看可执行代码时，代码对应的前面的数字(gdb下行数)
break *0x.....            // 在地址0x......处设置断点

info break                // 查看断点
delete  n                 // 若不加n，则删除所有断点，反之删除断点n(断点编号)

run/r 1 2 3               // 启动程序，遇到断点停下， 1 2 3 表示命令行参数， 可有可无
continue/c                // 继续执行直到下一个断点

stepi/si  n               // 单步调试，遇到汇编函数就进入汇编函数,一次执行一条指令，若后面有n则表示一次执行n条指令
nexti/ni  n               // 同上但是不进入函数内部
step/s                    // 单步调试，这里指C语句，遇到C函数同样进入

kill                      // 终止程序

x/2wx $%rax               // 检查起始地址在%rax的内存里2个4-bytes的16进制表示
x/s   0x...               // 检查起始地址在0x....的字符串
p /x 555                  // 打印555的16进制表示
其他指令可参考：(cmu csapp的网页上提供了这两个网址)
http://csapp.cs.cmu.edu/2e/docs/gdbnotes-x86-64.txt
http://heather.cs.ucdavis.edu/~matloff/UnixAndC/CLanguage/Debug.html

三种方式：数据控制、条件跳转、跳转表(对应switch)

phase_1: 主要是查看带比较对象(其地址可以通过反汇编该代码查看)， 然后将其作为输入即可

phase_2: 主要是考查guard_do循环,先判断第一个数是否为1，是的话然后循环读入5个数，每次翻倍

phase_3: 主要是考察switch，对应答案有0-7，8种，我的答案里只是随便选择了一个

phase_4: 主要考察递归，对应可能答案7 0， 3 0， 1 0， 0 0

phase_5: 这个反汇编有点绕，但是理清楚了起始就是在地址0x4024b0开始的数组(包含16个元素)，选出6个下标使其对应的元素可以组成"flyers"
最终输入的字符串就是以这6个下标对应的数字作为后4位的数字对应的字母的组合，这6个下标分别为9、15、14、5、6、7，然后根据ascii表随意组合出来一种即可

phase_6: 最复杂的一个了。之所以称最复杂，主要是汇编代码太长，柔和了很多东西(但核心就是链表从大到小排序)。链表头节点(0x6032d0),输入6个数据:1 2 3 4 5 6的一种组合
解题思路就是将以0x6032d0为第一个节点的链表对应的数据一次列出来，然后排个序，用7减去每个元素对应的原下标(从1开始)得到的序列就是题目要求的输入。

secret_phase: 不注意的话可能猛然间不知道还有这么一个隐藏炸弹，在最后反汇编phase_defused, 就会发现只有满足某个条件时才会启动该隐藏炸弹。阅读该汇编代码后不难发现，在0x603870这个地址处
需要有两个数字，一个字符串，该字符串对应phase_4两个输入数字后面的输入。当时只输入了两个数字，故而没有引发这个隐藏炸弹。当phase_4的两个数字输入后面包括还有输入时就会引发隐藏炸弹。
根据后面的比较知该字符串只能是地址0x402622处的字符串"DrEvil",进入secret_phase以后阅读汇编代码，其核心就是调用了一个递归函数fun7，这个递归函数的本质就是一颗二叉树，根节点地址0x6030f0
通过检查其左右孩子可以构造出这么一颗二叉树，给出最终输入结果22(即0x16)
