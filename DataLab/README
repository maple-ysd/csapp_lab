本实验主要是为了熟悉二进制的表示、运算、以及转换

整数与无符号整数均采用补码形式表示，在计算机内部位表示一致，只是不同情况下编译器对其的解释不同从而具有不同的含义。

以一个4个字节数x为例：

二进制补码 ---> 无符号数
T2U(x) = x        (x >= 0)
T2U(x) = x + 2^32 (x < 0)

无符号数--->二进制补码
U2T(x) = x        (x < 2^31)
U2T(x) = x - 2^32 (x > 2^31) 

相当于无符号数的大于等于2^31的上方那一半整体下移2^32,反之亦然

浮点数表示
f = (-1)^(s) * 2^E * M
s: 符号位
E：对应的指数
M：对应的尾数

编码： E--->exp(阶码), M(尾数)---> frac
                s       exp       frac
        float   1       8         23                       
        double  1       11        52
        
E = exp - bias  (exp != 0)
E = 1 - bias    (exp == 0)
bias = 2^(k - 1) - 1
对于float来说，为2^(8 - 1) - 1 = 127
对于double来说，为2^(11 - 1) - 1 = 1023

IEEE规定， 阶码全1时， 若M为0，根据符号位表示+/-INF， 若M不为0， 表示不是一个数NaN
阶码全为0时，尾数M = frac
阶码不全为0时，表示隐藏了小数点(frac)前的1,此时被称为规格化表示
得益于以上规定，从而能表达0并且从非规格化数到规格化数有一个平滑的过度。
